name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    # Skip workflow if commit message contains [skip ci] or [skip-ci]
    if: "!contains(github.event.head_commit.message, 'skip ci') && !contains(github.event.head_commit.message, 'skip-ci') && !contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages in dependency order (required for type checking)
        run: |
          # Build in correct dependency order
          pnpm --filter @pixeltracer/shared run build
          pnpm --filter @pixeltracer/core run build
          pnpm --filter @pixeltracer/providers run build
          pnpm --filter @pixeltracer/ui run build

      - name: Type check
        run: pnpm -w run type-check

      - name: Run tests
        run: pnpm test
        continue-on-error: true

      - name: Build all packages
        run: pnpm -w run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump
        id: version_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "bump=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages for conventional commits
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif [[ "$COMMIT_MSG" == feat* ]]; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            else
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version based on type
          npm version ${{ steps.version_type.outputs.bump }} --no-git-tag-version --workspaces-update

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update workspace packages versions
        run: |
          # Update all workspace package versions to match root
          pnpm recursive exec -- npm version ${{ steps.version.outputs.version }} --no-git-tag-version || true

      - name: Update manifest.json version
        run: |
          # Update Chrome extension manifest.json version
          MANIFEST_PATH="apps/chrome-extension/src/manifest.json"
          NEW_VERSION="${{ steps.version.outputs.version }}"

          if [ -f "$MANIFEST_PATH" ]; then
            # Use node to update the manifest.json version
            node -e "
              const fs = require('fs');
              const path = '$MANIFEST_PATH';
              const manifest = JSON.parse(fs.readFileSync(path, 'utf8'));
              manifest.version = '$NEW_VERSION';
              fs.writeFileSync(path, JSON.stringify(manifest, null, 2) + '\n');
              console.log('Updated manifest.json version to $NEW_VERSION');
            "
          else
            echo "Warning: manifest.json not found at $MANIFEST_PATH"
          fi

      - name: Build Chrome Extension
        run: |
          cd apps/chrome-extension
          pnpm build

          # Create zip file for Chrome Web Store
          cd dist
          zip -r ../pixeltracer-chrome-extension-${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "# Changelog for v${{ steps.version.outputs.version }}" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "## What's Changed" >> CHANGELOG_TEMP.md
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG_TEMP.md || echo "- Initial release" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 2>/dev/null || echo "")...${{ steps.version.outputs.tag }}" >> CHANGELOG_TEMP.md

          # Save changelog content for release body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add -A
          git commit -m "chore: release v${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: false

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: PixelTracer ${{ steps.version.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            apps/chrome-extension/pixeltracer-chrome-extension-${{ steps.version.outputs.version }}.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Chrome Extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-${{ steps.version.outputs.version }}
          path: apps/chrome-extension/pixeltracer-chrome-extension-${{ steps.version.outputs.version }}.zip
          retention-days: 30

      - name: Create version tag
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}
